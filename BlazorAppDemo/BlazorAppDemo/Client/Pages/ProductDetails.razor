@page "/product/{id:int}"
@using BlazorAppDemo.Domain
@inject IProductService ProductService

@if (product == null)
{
    <span>@messange</span>
}
else
{
    <div class="media">
        <div class="media-img-wrapper mr-2">
            <img class="media-img" src="@product.ImageUrl" width="180" height="320" alt="@product.Title"/>
        </div>
        <div class="media-body">
            <h2 class="mb-0">@product.Title</h2>
            <p>@product.Description</p>
            @if (product.ProductVariants != null && product.ProductVariants.Count > 1)
            {
                <div class="mb-3 w-25">
                    <select class="form-select" @bind="currentTypeId">
                        @foreach (var variant in product.ProductVariants)
                        {
                            <option value ="@variant.ProductTypeId">@variant.ProductType.Name</option>
                        }
                    </select>
                </div>
            }
            @if (GetSelectedVariant() != null)
            {
                @if (GetSelectedVariant().OriginalPrice > GetSelectedVariant().Price)
                {
                    <h6 class="text-muted original-price">
                        $@GetSelectedVariant().OriginalPrice
                    </h6>
                }
                <h4 class="price">
                    @GetSelectedVariant().Price
                </h4>
            }
        </div>
    </div>
}

@code {
    private Product? product = null;
    private string messange = string.Empty;
    private int currentTypeId = 1;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        messange = "Loading product ...";
        var result = await ProductService.GetProduct(Id);
        if (!result.Success)
        {
            messange = result.Message;
        }
        else
        {
            product = result.Data;
            if (product.ProductVariants.Count > 0)
            {
                currentTypeId = product.ProductVariants[0].ProductTypeId;
            }
        }
    }

    private ProductVariant GetSelectedVariant()
    {
        var varient = product.ProductVariants.FirstOrDefault(x => x.ProductTypeId == currentTypeId);
        return varient;
    }

}